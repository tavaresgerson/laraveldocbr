import{_ as s,c as a,o as e,a4 as i}from"./chunks/framework.nQaBHiNx.js";const g=JSON.parse('{"title":"Teste: Começando","description":"","frontmatter":{},"headers":[],"relativePath":"docs/testing.md","filePath":"docs/testing.md"}'),t={name:"docs/testing.md"},n=i(`<h1 id="teste-comecando" tabindex="-1">Teste: Começando <a class="header-anchor" href="#teste-comecando" aria-label="Permalink to &quot;Teste: Começando&quot;">​</a></h1><p><a name="introduction"></a></p><h2 id="introducao" tabindex="-1">Introdução <a class="header-anchor" href="#introducao" aria-label="Permalink to &quot;Introdução&quot;">​</a></h2><p>O Laravel foi construído com testes em mente. De fato, suporte para testes com <a href="https://pestphp.com" target="_blank" rel="noreferrer">Pest</a> e <a href="https://phpunit.de" target="_blank" rel="noreferrer">PHPUnit</a> está incluído por padrão, e um arquivo <code>phpunit.xml</code> já foi configurado para sua aplicação. O framework também oferece métodos de ajuda convenientes que permitem testar suas aplicações de forma expressiva.</p><p>Por padrão seu diretório <code>tests</code> da aplicação contém dois subdiretórios: <code>Feature</code> e <code>Unit</code>. Testes unitários são testes que se concentram em uma pequena parte isolada do código. Na verdade, na maioria dos casos de testes unitários provavelmente se concentrarão em um único método. Os testes dentro do seu diretório &quot;Unit&quot; não inicializam o Laravel app, portanto eles não podem acessar o banco de dados da aplicação ou outros serviços do framework.</p><p>Os testes de recurso (<em>feature</em>) podem testar uma parte maior do seu código, incluindo como vários objetos interagem entre si ou até mesmo uma solicitação HTTP completa para um <em>endpoint</em> JSON. <strong>Geralmente, a maioria dos seus testes deve ser de recursos. Esses tipos de testes fornecem mais confiança de que o sistema como um todo está funcionando conforme pretendido.</strong></p><p>Um arquivo <code>ExampleTest.php</code> é fornecido em ambas as pastas de teste de <code>Feature</code> e <code>Unit</code>. Depois de instalar um novo aplicativo Laravel, execute o comando <code>vendor/bin/pest</code>, <code>vendor/bin/phpunit</code> ou <code>php artisan test</code> para executar seus testes.</p><p><a name="environment"></a></p><h2 id="ambiente" tabindex="-1">Ambiente <a class="header-anchor" href="#ambiente" aria-label="Permalink to &quot;Ambiente&quot;">​</a></h2><p>Ao executar testes, o Laravel automaticamente define o <a href="/docs/configuration.html#environment-configuration">ambiente de configuração</a> para <code>testing</code> devido às variáveis de ambiente definidas no arquivo <code>phpunit.xml</code>. O Laravel também configura automaticamente a sessão e o cache para o driver <code>array</code> para que nenhum dado da sessão ou do cache sejam persistidos durante os testes.</p><p>Você é livre para definir outros valores de configuração de ambiente de teste como necessário. Variáveis de ambiente do <code>teste</code> podem ser configuradas no arquivo <code>phpunit.xml</code> da sua aplicação, mas certifique-se de limpar seu cache de configuração usando o comando Artisan <code>config:clear</code> antes de executar seus testes!</p><p><a name="the-env-testing-environment-file"></a></p><h4 id="arquivo-de-ambiente-env-testing" tabindex="-1">Arquivo de ambiente <code>.env.testing</code> <a class="header-anchor" href="#arquivo-de-ambiente-env-testing" aria-label="Permalink to &quot;Arquivo de ambiente \`.env.testing\`&quot;">​</a></h4><p>Além disso, você pode criar um arquivo <code>.env.testing</code> na raiz do seu projeto. Este arquivo será usado em vez do arquivo <code>.env</code> quando executar testes do Pest e do PHPUnit ou executar comandos do Artisan com a opção <code>--env=testing</code>.</p><p><a name="creating-tests"></a></p><h2 id="criando-testes" tabindex="-1">Criando testes <a class="header-anchor" href="#criando-testes" aria-label="Permalink to &quot;Criando testes&quot;">​</a></h2><p>Para criar um novo caso de teste, utilize o comando <code>make:test</code> do Artisan. Por padrão, os testes serão colocados no diretório <code>tests/Feature</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> UserTest</span></span></code></pre></div><p>Se você gostaria de criar um teste dentro do diretório <code>tests/Unit</code>, pode usar a opção <code>--unit</code> quando executar o comando <code>make:test</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> UserTest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unit</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">NOTA</p><p>Os <em>stubs</em> de teste podem ser personalizados usando <a href="/docs/artisan.html#stub-customization">publicação de <em>stubs</em></a>.</p></div><p>Uma vez que o teste foi gerado, você pode definir o teste como normalmente faria usando Pest ou PHPUnit. Para executar os seus testes, execute o comando <code>vendor/bin/pest</code>, <code>vendor/bin/phpunit</code> ou <code>php artisan test</code> do seu terminal:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-zX72d" id="tab-qiUnrsi" checked="checked"><label for="tab-qiUnrsi">Pest</label><input type="radio" name="group-zX72d" id="tab-ILsZO6P"><label for="tab-ILsZO6P">PHPUnit</label></div><div class="blocks"><div class="language-php vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;basic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tests\\Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PHPUnit\\Framework\\TestCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExampleTest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestCase</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * A basic test example.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_basic_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        $this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><div class="warning custom-block"><p class="custom-block-title">AVISO</p><p>Se você define seus próprios métodos <code>setUp</code> / <code>tearDown</code> dentro de uma classe de teste, tenha a certeza de chamar os respectivos métodos <code>parent::setUp()</code> / <code>parent::tearDown()</code> da classe pai. Geralmente, você deve invocar <code>parent::setUp()</code> no início do seu próprio método <code>setUp</code> e <code>parent::tearDown()</code> no final do seu método <code>tearDown</code>.</p></div><p><a name="running-tests"></a></p><h2 id="executando-os-testes" tabindex="-1">Executando os Testes <a class="header-anchor" href="#executando-os-testes" aria-label="Permalink to &quot;Executando os Testes&quot;">​</a></h2><p>Como mencionado anteriormente, depois de ter escrito os testes, você pode executá-los usando <code>pest</code> ou <code>phpunit</code>:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-L2Ga2" id="tab-57Z30NL" checked="checked"><label for="tab-57Z30NL">Pest</label><input type="radio" name="group-L2Ga2" id="tab-sgWks4F"><label for="tab-sgWks4F">PHPUnit</label></div><div class="blocks"><div class="language-shell vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./vendor/bin/pest</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./vendor/bin/phpunit</span></span></code></pre></div></div></div><p>Além dos comandos <code>pest</code> ou <code>phpunit</code>, você pode usar o comando <code>test</code> do Artisan para executar seus testes. O executor de testes do Artisan fornece relatórios detalhados para facilitar o desenvolvimento e a depuração:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><p>Quaisquer argumentos que podem ser passados para o comando <code>pest</code> ou <code>phpunit</code> também podem ser passados ao comando <code>arteson test</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --testsuite=Feature</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stop-on-failure</span></span></code></pre></div><p><a name="running-tests-in-parallel"></a></p><h3 id="execeutando-testes-em-paralelo" tabindex="-1">Execeutando Testes em Paralelo <a class="header-anchor" href="#execeutando-testes-em-paralelo" aria-label="Permalink to &quot;Execeutando Testes em Paralelo&quot;">​</a></h3><p>Por padrão, Laravel e Pest / PHPUnit executam testes sequencialmente dentro de um único processo. No entanto, você pode reduzir significativamente o tempo necessário para executar seus testes ao executar testes simultaneamente em vários processos. Para começar, você deve instalar o pacote <code>brianium/paratest</code> como uma dependência &quot;<em>dev</em>&quot; usando o Composer. Em seguida, inclua a opção <code>--parallel</code> ao executar o comando <code>test</code> Artisan:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> brianium/paratest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --parallel</span></span></code></pre></div><p>Por padrão o Laravel irá criar tantos processos quanto as núcleos da CPU disponíveis na sua máquina. Porém você pode ajustar a quantidade de processos usando a opção <code>--processes</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --parallel</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --processes=4</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">ATENÇÃO</p><p>Ao executar testes em paralelo, algumas opções do Pest/PHPUnit (como <code>--do-not-cache-result</code>) podem não estar disponíveis.</p></div><p><a name="parallel-testing-and-databases"></a></p><h4 id="testes-paralelos-e-bancos-de-dados" tabindex="-1">Testes Paralelos e Bancos de Dados <a class="header-anchor" href="#testes-paralelos-e-bancos-de-dados" aria-label="Permalink to &quot;Testes Paralelos e Bancos de Dados&quot;">​</a></h4><p>Enquanto você configurou uma conexão de banco de dados principal, o Laravel lida automaticamente com a criação e migração do teste de um banco de dados para cada processo paralelo que está executando seus testes. Os bancos de dados de teste serão sufixados com um token de processo que é exclusivo por processo. Por exemplo, se você tiver dois processos paralelos de teste, o Laravel criará e utilizará bancos de dados de teste <code>seu_db_teste_1</code> e <code>seu_db_teste_2</code>.</p><p>Por padrão, os bancos de dados de teste persistem entre as chamadas ao comando artisan <code>test</code>, para que eles possam ser reutilizados por chamadas subsequentes. Contudo, você pode recriá-los usando a opção <code>--recreate-databases</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --parallel</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recreate-databases</span></span></code></pre></div><p><a name="parallel-testing-hooks"></a></p><h4 id="ganchos-de-testes-paralelos" tabindex="-1">Ganchos de Testes Paralelos <a class="header-anchor" href="#ganchos-de-testes-paralelos" aria-label="Permalink to &quot;Ganchos de Testes Paralelos&quot;">​</a></h4><p>Às vezes você pode precisar preparar os recursos certos usados pelos testes de sua aplicação para que eles possam ser utilizados com segurança por vários processos de teste.</p><p>Usando o <em>facade</em> <code>ParallelTesting</code>, você pode especificar o código para ser executado no processo de configuração e encerramento de um caso de teste ou processo. As variáveis <em>closures</em> fornecidas recebem as variáveis <code>$token</code> e <code>$testCase</code> que contêm, respectivamente, o token do processo e o caso de teste atual:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App\\Providers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Illuminate\\Support\\Facades\\Artisan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Illuminate\\Support\\Facades\\ParallelTesting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Illuminate\\Support\\ServiceProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PHPUnit\\Framework\\TestCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppServiceProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServiceProvider</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * Inicialize qualquer serviço de aplicativo.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> boot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        ParallelTesting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUpProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $token) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        ParallelTesting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUpTestCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $token, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TestCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $testCase) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Executado quando um banco de dados de teste é criado...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        ParallelTesting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUpTestDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $database, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $token) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Artisan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;db:seed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        ParallelTesting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tearDownTestCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $token, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TestCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $testCase) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        ParallelTesting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tearDownProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $token) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a name="accessing-the-parallel-testing-token"></a></p><h4 id="acessando-o-token-de-teste-paralelo" tabindex="-1">Acessando o Token de Teste Paralelo <a class="header-anchor" href="#acessando-o-token-de-teste-paralelo" aria-label="Permalink to &quot;Acessando o Token de Teste Paralelo&quot;">​</a></h4><p>Se você gostaria de acessar o &quot;<em>token</em>&quot; atual do processo paralelo de qualquer outro local no seu código de teste da aplicação, você pode usar o método <code>token</code>. Este <em>token</em> é um identificador de string único para um processo de teste individual e pode ser usado para segmentar recursos entre processos paralelos de testes. Por exemplo, o Laravel anexa automaticamente este <em>token</em> ao final dos bancos de dados criados por cada processo paralelo de teste:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ParallelTesting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><a name="reporting-test-coverage"></a></p><h3 id="relatorio-de-cobertura-do-teste" tabindex="-1">Relatório de Cobertura do Teste <a class="header-anchor" href="#relatorio-de-cobertura-do-teste" aria-label="Permalink to &quot;Relatório de Cobertura do Teste&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">ATENÇÃO</p><p>Esta funcionalidade requer <a href="https://xdebug.org" target="_blank" rel="noreferrer">Xdebug</a> ou <a href="https://pecl.php.net/package/pcov" target="_blank" rel="noreferrer">PCOV</a>.</p></div><p>Ao executar seus testes de aplicação, você pode querer determinar se seus casos de testes realmente estão cobrindo o código da aplicação e o quanto a aplicação é usada ao executar seus testes. Para conseguir isso, você pode fornecer a opção <code>--coverage</code> quando invocar o comando <code>test</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --coverage</span></span></code></pre></div><p><a name="enforcing-a-minimum-coverage-threshold"></a></p><h4 id="ajustando-um-limite-minimo-de-cobertura" tabindex="-1">Ajustando um Limite Mínimo de Cobertura <a class="header-anchor" href="#ajustando-um-limite-minimo-de-cobertura" aria-label="Permalink to &quot;Ajustando um Limite Mínimo de Cobertura&quot;">​</a></h4><p>Você pode usar a opção <code>--min</code> para definir um limite mínimo de cobertura de teste para sua aplicação. O conjunto de testes falhará se esse limite não for atendido:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --coverage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --min=80.3</span></span></code></pre></div><p><a name="profiling-tests"></a></p><h3 id="perfil-de-testes" tabindex="-1">Perfil de testes <a class="header-anchor" href="#perfil-de-testes" aria-label="Permalink to &quot;Perfil de testes&quot;">​</a></h3><p>O Artisan também inclui um mecanismo conveniente para listar os testes mais lentos de sua aplicação. Invocar o comando <code>test</code> com a opção <code>--profile</code> vai apresentar uma lista dos 10 testes mais lentos, permitindo que você investigue quais testes podem ser melhorados para acelerar seu conjunto de testes:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --profile</span></span></code></pre></div>`,66),o=[n];function p(l,d,h,r,c,k){return e(),a("div",null,o)}const m=s(t,[["render",p]]);export{g as __pageData,m as default};
