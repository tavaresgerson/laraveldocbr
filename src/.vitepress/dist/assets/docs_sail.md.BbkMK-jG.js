import{_ as a,c as s,o as e,a4 as i}from"./chunks/framework.nQaBHiNx.js";const m=JSON.parse('{"title":"Laravel Sail","description":"","frontmatter":{},"headers":[],"relativePath":"docs/sail.md","filePath":"docs/sail.md"}'),o={name:"docs/sail.md"},n=i(`<h1 id="laravel-sail" tabindex="-1">Laravel Sail <a class="header-anchor" href="#laravel-sail" aria-label="Permalink to &quot;Laravel Sail&quot;">​</a></h1><p><a name="introduction"></a></p><h2 id="introducao" tabindex="-1">Introdução <a class="header-anchor" href="#introducao" aria-label="Permalink to &quot;Introdução&quot;">​</a></h2><p><a href="https://github.com/laravel/sail" target="_blank" rel="noreferrer">Laravel Sail</a> é uma interface de linha de comando leve para interagir com o ambiente de desenvolvimento Docker padrão do Laravel. O Sail fornece um ótimo ponto de partida para construir um aplicativo Laravel usando PHP, MySQL e Redis sem exigir experiência anterior com o Docker.</p><p>Em sua essência, o Sail é o arquivo <code>docker-compose.yml</code> e o script <code>sail</code> que é armazenado na raiz do seu projeto. O script <code>sail</code> fornece uma CLI com métodos convenientes para interagir com os contêineres Docker definidos pelo arquivo <code>docker-compose.yml</code>.</p><p>O Laravel Sail é suportado no macOS, Linux e Windows (via <a href="https://docs.microsoft.com/en-us/windows/wsl/about" target="_blank" rel="noreferrer">WSL2</a>).</p><p><a name="installation"></a></p><h2 id="instalacao-e-configuracao" tabindex="-1">Instalação e configuração <a class="header-anchor" href="#instalacao-e-configuracao" aria-label="Permalink to &quot;Instalação e configuração&quot;">​</a></h2><p>O Laravel Sail é instalado automaticamente com todos os novos aplicativos Laravel para que você possa começar a usá-lo imediatamente. Para aprender como criar um novo aplicativo Laravel, consulte a <a href="/docs/installation.html#docker-installation-using-sail">documentação de instalação</a> do Laravel para seu sistema operacional. Durante a instalação, você será solicitado a escolher com quais serviços suportados pelo Sail seu aplicativo irá interagir.</p><p><a name="installing-sail-into-existing-applications"></a></p><h3 id="instalando-o-sail-em-aplicativos-existentes" tabindex="-1">Instalando o Sail em aplicativos existentes <a class="header-anchor" href="#instalando-o-sail-em-aplicativos-existentes" aria-label="Permalink to &quot;Instalando o Sail em aplicativos existentes&quot;">​</a></h3><p>Se você estiver interessado em usar o Sail com um aplicativo Laravel existente, você pode simplesmente instalar o Sail usando o gerenciador de pacotes do Composer. Claro, essas etapas pressupõem que seu ambiente de desenvolvimento local existente permite que você instale dependências do Composer:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laravel/sail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dev</span></span></code></pre></div><p>Após a instalação do Sail, você pode executar o comando Artisan <code>sail:install</code>. Este comando publicará o arquivo <code>docker-compose.yml</code> do Sail na raiz do seu aplicativo e modificará seu arquivo <code>.env</code> com as variáveis ​​de ambiente necessárias para conectar-se aos serviços do Docker:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sail:install</span></span></code></pre></div><p>Finalmente, você pode iniciar o Sail. Para continuar aprendendo como usar o Sail, continue lendo o restante desta documentação:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./vendor/bin/sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">AVISO</p><p>Se estiver usando o Docker Desktop para Linux, você deve usar o contexto <code>default</code> do Docker executando o seguinte comando: <code>docker context use default</code>.</p></div><p><a name="adding-additional-services"></a></p><h4 id="adicionando-servicos-adicionais" tabindex="-1">Adicionando serviços adicionais <a class="header-anchor" href="#adicionando-servicos-adicionais" aria-label="Permalink to &quot;Adicionando serviços adicionais&quot;">​</a></h4><p>Se você quiser adicionar um serviço adicional à sua instalação Sail existente, você pode executar o comando Artisan <code>sail:add</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sail:add</span></span></code></pre></div><p><a name="using-devcontainers"></a></p><h4 id="usando-devcontainers" tabindex="-1">Usando Devcontainers <a class="header-anchor" href="#usando-devcontainers" aria-label="Permalink to &quot;Usando Devcontainers&quot;">​</a></h4><p>Se você quiser desenvolver dentro de um <a href="https://code.visualstudio.com/docs/remote/containers" target="_blank" rel="noreferrer">Devcontainer</a>, você pode fornecer a opção <code>--devcontainer</code> para o comando <code>sail:install</code>. A opção <code>--devcontainer</code> instruirá o comando <code>sail:install</code> a publicar um arquivo <code>.devcontainer/devcontainer.json </code> padrão na raiz do seu aplicativo:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sail:install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --devcontainer</span></span></code></pre></div><p><a name="rebuilding-sail-images"></a></p><h3 id="reconstruindo-imagens-sail" tabindex="-1">Reconstruindo imagens Sail <a class="header-anchor" href="#reconstruindo-imagens-sail" aria-label="Permalink to &quot;Reconstruindo imagens Sail&quot;">​</a></h3><p>Às vezes, você pode querer reconstruir completamente suas imagens Sail para garantir que todos os pacotes e softwares da imagem estejam atualizados. Você pode fazer isso usando o comando <code>build</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-cache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><p><a name="configuring-a-shell-alias"></a></p><h3 id="configurando-um-alias-de-shell" tabindex="-1">Configurando um alias de shell <a class="header-anchor" href="#configurando-um-alias-de-shell" aria-label="Permalink to &quot;Configurando um alias de shell&quot;">​</a></h3><p>Por padrão, os comandos Sail são invocados usando o script <code>vendor/bin/sail</code> que está incluído em todos os novos aplicativos Laravel:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./vendor/bin/sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><p>No entanto, em vez de digitar repetidamente <code>vendor/bin/sail</code> para executar comandos Sail, você pode configurar um alias de shell que permita executar os comandos Sail mais facilmente:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sail</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sh $([ -f sail ] &amp;&amp; echo sail || echo vendor/bin/sail)&#39;</span></span></code></pre></div><p>Para garantir que isso esteja sempre disponível, você pode adicionar isso ao seu arquivo de configuração de shell em seu diretório home, como <code>~/.zshrc</code> ou <code>~/.bashrc</code>, e então reiniciar seu shell.</p><p>Uma vez que o alias de shell tenha sido configurado, você pode executar comandos Sail simplesmente digitando <code>sail</code>. O restante dos exemplos desta documentação assumirá que você configurou este alias:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><p><a name="starting-and-stopping-sail"></a></p><h2 id="iniciando-e-parando-o-sail" tabindex="-1">Iniciando e Parando o Sail <a class="header-anchor" href="#iniciando-e-parando-o-sail" aria-label="Permalink to &quot;Iniciando e Parando o Sail&quot;">​</a></h2><p>O arquivo <code>docker-compose.yml</code> do Laravel Sail define uma variedade de contêineres Docker que trabalham juntos para ajudar você a construir aplicativos Laravel. Cada um desses contêineres é uma entrada dentro da configuração <code>services</code> do seu arquivo <code>docker-compose.yml</code>. O contêiner <code>laravel.test</code> é o contêiner de aplicativo principal que estará servindo seu aplicativo.</p><p>Antes de iniciar o Sail, você deve garantir que nenhum outro servidor web ou banco de dados esteja em execução no seu computador local. Para iniciar todos os contêineres Docker definidos no arquivo <code>docker-compose.yml</code> do seu aplicativo, você deve executar o comando <code>up</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><p>Para iniciar todos os contêineres Docker em segundo plano, você pode iniciar o Sail no modo &quot;desanexado&quot;:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>Depois que os contêineres do aplicativo forem iniciados, você pode acessar o projeto no seu navegador da web em: <a href="http://localhost" target="_blank" rel="noreferrer">http://localhost</a>.</p><p>Para parar todos os contêineres, você pode simplesmente pressionar Control + C para parar a execução do contêiner. Ou, se os contêineres estiverem sendo executados em segundo plano, você pode usar o comando <code>stop</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span></span></code></pre></div><p><a name="executing-sail-commands"></a></p><h2 id="executando-comandos" tabindex="-1">Executando comandos <a class="header-anchor" href="#executando-comandos" aria-label="Permalink to &quot;Executando comandos&quot;">​</a></h2><p>Ao usar o Laravel Sail, seu aplicativo é executado em um contêiner Docker e é isolado do seu computador local. No entanto, o Sail fornece uma maneira conveniente de executar vários comandos em seu aplicativo, como comandos PHP arbitrários, comandos Artisan, comandos Composer e comandos Node / NPM.</p><p><strong>Ao ler a documentação do Laravel, você frequentemente verá referências aos comandos Composer, Artisan e Node / NPM que não fazem referência ao Sail.</strong> Esses exemplos pressupõem que essas ferramentas estejam instaladas no seu computador local. Se você estiver usando o Sail para seu ambiente de desenvolvimento Laravel local, você deve executar esses comandos usando o Sail:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Executando comandos Artisan localmente...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> queue:work</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Executando comandos Artisan dentro do Laravel Sail...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> queue:work</span></span></code></pre></div><p><a name="executing-php-commands"></a></p><h3 id="executando-comandos-php" tabindex="-1">Executando comandos PHP <a class="header-anchor" href="#executando-comandos-php" aria-label="Permalink to &quot;Executando comandos PHP&quot;">​</a></h3><p>Os comandos PHP podem ser executados usando o comando <code>php</code>. Claro, esses comandos serão executados usando a versão PHP que está configurada para seu aplicativo. Para saber mais sobre as versões PHP disponíveis para o Laravel Sail, consulte a <a href="#sail-php-versions">documentação da versão PHP</a>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script.php</span></span></code></pre></div><p><a name="executing-composer-commands"></a></p><h3 id="executando-comandos-do-composer" tabindex="-1">Executando comandos do Composer <a class="header-anchor" href="#executando-comandos-do-composer" aria-label="Permalink to &quot;Executando comandos do Composer&quot;">​</a></h3><p>Os comandos do Composer podem ser executados usando o comando <code>composer</code>. O contêiner de aplicativo do Laravel Sail inclui uma instalação do Composer:</p><div class="language-nothing vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nothing</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sail composer require laravel/sanctum</span></span></code></pre></div><p><a name="installing-composer-dependencies-for-existing-projects"></a></p><h4 id="instalando-dependencias-do-composer-para-aplicativos-existentes" tabindex="-1">Instalando dependências do Composer para aplicativos existentes <a class="header-anchor" href="#instalando-dependencias-do-composer-para-aplicativos-existentes" aria-label="Permalink to &quot;Instalando dependências do Composer para aplicativos existentes&quot;">​</a></h4><p>Se você estiver desenvolvendo um aplicativo com uma equipe, você pode não ser o responsável por criar o aplicativo Laravel inicialmente. Portanto, nenhuma das dependências do Composer do aplicativo, incluindo o Sail, será instalada após você clonar o repositório do aplicativo para seu computador local.</p><p>Você pode instalar as dependências do aplicativo navegando até o diretório do aplicativo e executando o seguinte comando. Este comando usa um pequeno contêiner Docker contendo PHP e Composer para instalar as dependências do aplicativo:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):/var/www/html&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/www/html</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    laravelsail/php83-composer:latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ignore-platform-reqs</span></span></code></pre></div><p>Ao usar a imagem <code>laravelsail/phpXX-composer</code>, você deve usar a mesma versão do PHP que planeja usar para seu aplicativo (<code>80</code>, <code>81</code>, <code>82</code> ou <code>83</code>).</p><p><a name="executing-artisan-commands"></a></p><h3 id="executando-comandos-artisan" tabindex="-1">Executando comandos Artisan <a class="header-anchor" href="#executando-comandos-artisan" aria-label="Permalink to &quot;Executando comandos Artisan&quot;">​</a></h3><p>Os comandos Artisan do Laravel podem ser executados usando o comando <code>artisan</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> queue:work</span></span></code></pre></div><p><a name="executing-node-npm-commands"></a></p><h3 id="executando-comandos-node-npm" tabindex="-1">Executando comandos Node / NPM <a class="header-anchor" href="#executando-comandos-node-npm" aria-label="Permalink to &quot;Executando comandos Node / NPM&quot;">​</a></h3><p>Os comandos Node podem ser executados usando o comando <code>node</code> enquanto os comandos NPM podem ser executados usando o comando <code>npm</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><p>Se desejar, você pode usar Yarn em vez de NPM:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span></span></code></pre></div><p><a name="interacting-with-sail-databases"></a></p><h2 id="interagindo-com-bancos-de-dados" tabindex="-1">Interagindo com bancos de dados <a class="header-anchor" href="#interagindo-com-bancos-de-dados" aria-label="Permalink to &quot;Interagindo com bancos de dados&quot;">​</a></h2><p><a name="mysql"></a></p><h3 id="mysql" tabindex="-1">MySQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MySQL&quot;">​</a></h3><p>Como você deve ter notado, o arquivo <code>docker-compose.yml</code> do seu aplicativo contém uma entrada para um MySQL container. Este container usa um <a href="https://docs.docker.com/storage/volumes/" target="_blank" rel="noreferrer">volume Docker</a> para que os dados armazenados no seu banco de dados sejam persistidos mesmo ao parar e reiniciar seus containers.</p><p>Além disso, na primeira vez que o container MySQL for iniciado, ele criará dois bancos de dados para você. O primeiro banco de dados é nomeado usando o valor da sua variável de ambiente <code>DB_DATABASE</code> e é para seu desenvolvimento local. O segundo é um banco de dados de teste dedicado chamado <code>testing</code> e garantirá que seus testes não interfiram em seus dados de desenvolvimento.</p><p>Depois de iniciar seus containers, você pode se conectar à instância MySQL dentro do seu aplicativo definindo sua variável de ambiente <code>DB_HOST</code> dentro do arquivo <code>.env</code> do seu aplicativo para <code>mysql</code>.</p><p>Para se conectar ao banco de dados MySQL do seu aplicativo a partir da sua máquina local, você pode usar um aplicativo de gerenciamento de banco de dados gráfico como o <a href="https://tableplus.com" target="_blank" rel="noreferrer">TablePlus</a>. Por padrão, o banco de dados MySQL é acessível na porta <code>localhost</code> 3306 e as credenciais de acesso correspondem aos valores das variáveis ​​de ambiente <code>DB_USERNAME</code> e <code>DB_PASSWORD</code>. Ou você pode se conectar como o usuário <code>root</code>, que também utiliza o valor da variável de ambiente <code>DB_PASSWORD</code> como sua senha.</p><p><a name="redis"></a></p><h3 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h3><p>O arquivo <code>docker-compose.yml</code> do seu aplicativo também contém uma entrada para um contêiner <a href="https://redis.io" target="_blank" rel="noreferrer">Redis</a>. Este contêiner usa um <a href="https://docs.docker.com/storage/volumes/" target="_blank" rel="noreferrer">volume Docker</a> para que os dados armazenados em seus dados Redis sejam persistidos mesmo ao parar e reiniciar seus contêineres. Depois de iniciar seus contêineres, você pode se conectar à instância Redis dentro do seu aplicativo definindo sua variável de ambiente <code>REDIS_HOST</code> dentro do arquivo <code>.env</code> do seu aplicativo para <code>redis</code>.</p><p>Para conectar-se ao banco de dados Redis do seu aplicativo a partir da sua máquina local, você pode usar um aplicativo de gerenciamento de banco de dados gráfico, como o <a href="https://tableplus.com" target="_blank" rel="noreferrer">TablePlus</a>. Por padrão, o banco de dados Redis é acessível na porta <code>localhost</code> 6379.</p><p><a name="meilisearch"></a></p><h3 id="meilisearch" tabindex="-1">Meilisearch <a class="header-anchor" href="#meilisearch" aria-label="Permalink to &quot;Meilisearch&quot;">​</a></h3><p>Se você escolher instalar o serviço <a href="https://www.meilisearch.com" target="_blank" rel="noreferrer">Meilisearch</a> ao instalar o Sail, o arquivo <code>docker-compose.yml</code> do seu aplicativo conterá uma entrada para este poderoso mecanismo de busca que é integrado ao <a href="/docs/scout.html">Laravel Scout</a>. Depois de iniciar seus contêineres, você pode se conectar à instância do Meilisearch dentro do seu aplicativo definindo sua variável de ambiente <code>MEILISEARCH_HOST</code> como <code>http://meilisearch:7700</code>.</p><p>A partir da sua máquina local, você pode acessar o painel de administração baseado na web do Meilisearch navegando para <code>http://localhost:7700</code> no seu navegador da web.</p><p><a name="typesense"></a></p><h3 id="typesense" tabindex="-1">Typesense <a class="header-anchor" href="#typesense" aria-label="Permalink to &quot;Typesense&quot;">​</a></h3><p>Se você escolher instalar o serviço <a href="https://typesense.org" target="_blank" rel="noreferrer">Typesense</a> ao instalar o Sail, o arquivo <code>docker-compose.yml</code> do seu aplicativo conterá uma entrada para esse mecanismo de busca rápido como um raio e de código aberto que é integrado nativamente com o <a href="/docs/scout.html#typesense">Laravel Scout</a>. Depois de iniciar seus contêineres, você pode se conectar à instância do Typesense dentro do seu aplicativo definindo as seguintes variáveis ​​de ambiente:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TYPESENSE_HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=typesense</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TYPESENSE_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=8108</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TYPESENSE_PROTOCOL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=http</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TYPESENSE_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=xyz</span></span></code></pre></div><p>Na sua máquina local, você pode acessar a API do Typesense via <code>http://localhost:8108</code>.</p><p><a name="file-storage"></a></p><h2 id="armazenamento-de-arquivos" tabindex="-1">Armazenamento de arquivos <a class="header-anchor" href="#armazenamento-de-arquivos" aria-label="Permalink to &quot;Armazenamento de arquivos&quot;">​</a></h2><p>Se você planeja usar o Amazon S3 para armazenar arquivos enquanto executa seu aplicativo em seu ambiente de produção, você pode querer instalar o serviço <a href="https://min.io" target="_blank" rel="noreferrer">MinIO</a> ao instalar o Sail. O MinIO fornece uma API compatível com S3 que você pode usar para desenvolver localmente usando o driver de armazenamento de arquivos <code>s3</code> do Laravel sem criar buckets de armazenamento de &quot;teste&quot; em seu ambiente de produção S3. Se você escolher instalar o MinIO enquanto instala o Sail, uma seção de configuração do MinIO será adicionada ao arquivo <code>docker-compose.yml</code> do seu aplicativo.</p><p>Por padrão, o arquivo de configuração <code>filesystems</code> do seu aplicativo já contém uma configuração de disco para o disco <code>s3</code>. Além de usar este disco para interagir com o Amazon S3, você pode usá-lo para interagir com qualquer serviço de armazenamento de arquivos compatível com S3, como o MinIO, simplesmente modificando as variáveis ​​de ambiente associadas que controlam sua configuração. Por exemplo, ao usar o MinIO, a configuração da variável de ambiente do seu sistema de arquivos deve ser definida da seguinte forma:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FILESYSTEM_DISK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=s3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AWS_ACCESS_KEY_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=sail</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AWS_SECRET_ACCESS_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=password</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AWS_DEFAULT_REGION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=us-east-1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AWS_BUCKET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=local</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AWS_ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=http://minio:9000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AWS_USE_PATH_STYLE_ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span></code></pre></div><p>Para que a integração do Flysystem do Laravel gere URLs adequadas ao usar o MinIO, você deve definir a variável de ambiente <code>AWS_URL</code> para que ela corresponda à URL local do seu aplicativo e inclua o nome do bucket no caminho da URL:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AWS_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=http://localhost:9000/local</span></span></code></pre></div><p>Você pode criar buckets por meio do console MinIO, que está disponível em <code>http://localhost:8900</code>. O nome de usuário padrão para o console MinIO é <code>sail</code>, enquanto a senha padrão é <code>password</code>.</p><div class="warning custom-block"><p class="custom-block-title">AVISO</p><p>A geração de URLs de armazenamento temporário por meio do método <code>temporaryUrl</code> não é suportada ao usar o MinIO.</p></div><p><a name="running-tests"></a></p><h2 id="executando-testes" tabindex="-1">Executando Testes <a class="header-anchor" href="#executando-testes" aria-label="Permalink to &quot;Executando Testes&quot;">​</a></h2><p>O Laravel fornece um suporte incrível para testes prontos para uso, e você pode usar o comando <code>test</code> do Sail para executar seus aplicativos <a href="/docs/testing.html">testes de recursos e unidades</a>. Quaisquer opções de CLI que sejam aceitas pelo Pest / PHPUnit também podem ser passadas para o comando <code>test</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --group</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> orders</span></span></code></pre></div><p>O comando <code>test</code> do Sail é equivalente a executar o comando <code>test</code> do Artisan:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><p>Por padrão, o Sail criará um banco de dados <code>testing</code> dedicado para que seus testes não interfiram no estado atual do seu banco de dados. Em uma instalação padrão do Laravel, o Sail também configurará seu arquivo <code>phpunit.xml</code> para usar este banco de dados ao executar seus testes:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">env</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DB_DATABASE&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><p><a name="laravel-dusk"></a></p><h3 id="laravel-dusk" tabindex="-1">Laravel Dusk <a class="header-anchor" href="#laravel-dusk" aria-label="Permalink to &quot;Laravel Dusk&quot;">​</a></h3><p><a href="/docs/dusk.html">Laravel Dusk</a> fornece uma API de automação e teste de navegador expressiva e fácil de usar. Graças ao Sail, você pode executar esses testes sem nunca instalar o Selenium ou outras ferramentas em seu computador local. Para começar, descomente o serviço Selenium no arquivo <code>docker-compose.yml</code> do seu aplicativo:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">selenium</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;selenium/standalone-chrome&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    extra_hosts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;host.docker.internal:host-gateway&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/dev/shm:/dev/shm&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sail</span></span></code></pre></div><p>Em seguida, certifique-se de que o serviço <code>laravel.test</code> no arquivo <code>docker-compose.yml</code> do seu aplicativo tenha uma entrada <code>depends_on</code> para <code>selenium</code>:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">depends_on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">selenium</span></span></code></pre></div><p>Finalmente, você pode executar seu conjunto de testes Dusk iniciando o Sail e executando o comando <code>dusk</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dusk</span></span></code></pre></div><p><a name="selenium-on-apple-silicon"></a></p><h4 id="selenium-no-apple-silicon" tabindex="-1">Selenium no Apple Silicon <a class="header-anchor" href="#selenium-no-apple-silicon" aria-label="Permalink to &quot;Selenium no Apple Silicon&quot;">​</a></h4><p>Se sua máquina local contiver um chip Apple Silicon, seu serviço <code>selenium</code> deverá usar a imagem <code>seleniarm/standalone-chromium</code>:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">selenium</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;seleniarm/standalone-chromium&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    extra_hosts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;host.docker.internal:host-gateway&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/dev/shm:/dev/shm&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sail</span></span></code></pre></div><p><a name="previewing-emails"></a></p><h2 id="visualizando-e-mails" tabindex="-1">Visualizando e-mails <a class="header-anchor" href="#visualizando-e-mails" aria-label="Permalink to &quot;Visualizando e-mails&quot;">​</a></h2><p>O arquivo padrão <code>docker-compose.yml</code> do Laravel Sail contém uma entrada de serviço para <a href="https://github.com/axllent/mailpit" target="_blank" rel="noreferrer">Mailpit</a>. O Mailpit intercepta e-mails enviados pelo seu aplicativo durante o desenvolvimento local e fornece uma interface web conveniente para que você possa visualizar suas mensagens de e-mail no seu navegador. Ao usar o Sail, o host padrão do Mailpit é <code>mailpit</code> e está disponível pela porta 1025:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MAIL_HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=mailpit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MAIL_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=1025</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MAIL_ENCRYPTION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=null</span></span></code></pre></div><p>Quando o Sail está em execução, você pode acessar a interface web do Mailpit em: <a href="http://localhost:8025" target="_blank" rel="noreferrer">http://localhost:8025</a></p><p><a name="sail-container-cli"></a></p><h2 id="container-cli" tabindex="-1">Container CLI <a class="header-anchor" href="#container-cli" aria-label="Permalink to &quot;Container CLI&quot;">​</a></h2><p>Às vezes, você pode desejar iniciar uma sessão Bash dentro do contêiner do seu aplicativo. Você pode usar o comando <code>shell</code> para se conectar ao contêiner do seu aplicativo, permitindo que você inspecione seus arquivos e serviços instalados, bem como execute comandos shell arbitrários dentro do contêiner:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shell</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root-shell</span></span></code></pre></div><p>Para iniciar uma nova sessão <a href="https://github.com/laravel/tinker" target="_blank" rel="noreferrer">Laravel Tinker</a>, você pode executar o comando <code>tinker</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tinker</span></span></code></pre></div><p><a name="sail-php-versions"></a></p><h2 id="versoes-do-php" tabindex="-1">Versões do PHP <a class="header-anchor" href="#versoes-do-php" aria-label="Permalink to &quot;Versões do PHP&quot;">​</a></h2><p>O Sail atualmente oferece suporte para servir seu aplicativo via PHP 8.3, 8.2, 8.1 ou PHP 8.0. A versão padrão do PHP usada pelo Sail atualmente é o PHP 8.3. Para alterar a versão do PHP usada para atender seu aplicativo, você deve atualizar a definição <code>build</code> do contêiner <code>laravel.test</code> no arquivo <code>docker-compose.yml</code> do seu aplicativo:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># PHP 8.3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./vendor/laravel/sail/runtimes/8.3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># PHP 8.2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./vendor/laravel/sail/runtimes/8.2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># PHP 8.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./vendor/laravel/sail/runtimes/8.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># PHP 8.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./vendor/laravel/sail/runtimes/8.0</span></span></code></pre></div><p>Além disso, você pode desejar atualizar o nome da sua <code>image</code> para refletir a versão do PHP usada pelo seu aplicativo. Esta opção também é definida no arquivo <code>docker-compose.yml</code> do seu aplicativo:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sail-8.2/app</span></span></code></pre></div><p>Após atualizar o arquivo <code>docker-compose.yml</code> do seu aplicativo, você deve reconstruir suas imagens de contêiner:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-cache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><p><a name="sail-node-versions"></a></p><h2 id="versoes-do-node" tabindex="-1">Versões do Node <a class="header-anchor" href="#versoes-do-node" aria-label="Permalink to &quot;Versões do Node&quot;">​</a></h2><p>O Sail instala o Node 20 por padrão. Para alterar a versão do Node que é instalada ao construir suas imagens, você pode atualizar a definição <code>build.args</code> do serviço <code>laravel.test</code> no arquivo <code>docker-compose.yml</code> do seu aplicativo:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        WWWGROUP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;\${WWWGROUP}&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        NODE_VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;18&#39;</span></span></code></pre></div><p>Após atualizar o arquivo <code>docker-compose.yml</code> do seu aplicativo, você deve reconstruir suas imagens de contêiner:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-cache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><p><a name="sharing-your-site"></a></p><h2 id="compartilhando-seu-site" tabindex="-1">Compartilhando seu site <a class="header-anchor" href="#compartilhando-seu-site" aria-label="Permalink to &quot;Compartilhando seu site&quot;">​</a></h2><p>Às vezes, você pode precisar compartilhar seu site publicamente para visualizá-lo para um colega ou para testar integrações de webhook com seu aplicativo. Para compartilhar seu site, você pode usar o comando <code>share</code>. Após executar este comando, você receberá uma URL aleatória <code>laravel-sail.site</code> que você pode usar para acessar seu aplicativo:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> share</span></span></code></pre></div><p>Ao compartilhar seu site por meio do comando <code>share</code>, você deve configurar os proxies confiáveis ​​do seu aplicativo usando o método de middleware <code>trustProxies</code> no arquivo <code>bootstrap/app.php</code> do seu aplicativo. Caso contrário, os auxiliares de geração de URL, como <code>url</code> e <code>route</code>, não conseguirão determinar o host HTTP correto que deve ser usado durante a geração de URL:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Middleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $middleware) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $middleware</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trustProxies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span></code></pre></div><p>Se você quiser escolher o subdomínio para seu site compartilhado, pode fornecer a opção <code>subdomain</code> ao executar o comando <code>share</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> share</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --subdomain=my-sail-site</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">NOTA</p><p>O comando <code>share</code> é alimentado pelo <a href="https://github.com/beyondcode/expose" target="_blank" rel="noreferrer">Expose</a>, um serviço de tunelamento de código aberto da <a href="https://beyondco.de" target="_blank" rel="noreferrer">BeyondCode</a>.</p></div><p><a name="debugging-with-xdebug"></a></p><h2 id="depuracao-com-xdebug" tabindex="-1">Depuração com Xdebug <a class="header-anchor" href="#depuracao-com-xdebug" aria-label="Permalink to &quot;Depuração com Xdebug&quot;">​</a></h2><p>A configuração do Docker do Laravel Sail inclui suporte para <a href="https://xdebug.org/" target="_blank" rel="noreferrer">Xdebug</a>, um depurador popular e poderoso para PHP. Para habilitar o Xdebug, você precisará adicionar algumas variáveis ​​ao arquivo <code>.env</code> do seu aplicativo para <a href="https://xdebug.org/docs/step_debug#mode" target="_blank" rel="noreferrer">configurar o Xdebug</a>. Para habilitar o Xdebug, você deve definir o(s) modo(s) apropriado(s) antes de iniciar o Sail:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SAIL_XDEBUG_MODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=develop,debug,coverage</span></span></code></pre></div><h4 id="configuracao-de-ip-do-host-linux" tabindex="-1">Configuração de IP do host Linux <a class="header-anchor" href="#configuracao-de-ip-do-host-linux" aria-label="Permalink to &quot;Configuração de IP do host Linux&quot;">​</a></h4><p>Internamente, a variável de ambiente <code>XDEBUG_CONFIG</code> é definida como <code>client_host=host.docker.internal</code> para que o Xdebug seja configurado corretamente para Mac e Windows (WSL2). Se sua máquina local estiver executando Linux, você deve garantir que esteja executando o Docker Engine 17.06.0+ e o Compose 1.16.0+. Caso contrário, você precisará definir manualmente essa variável de ambiente, conforme mostrado abaixo.</p><p>Primeiro, você deve determinar o endereço IP do host correto para adicionar à variável de ambiente executando o seguinte comando. Normalmente, o <code>&lt;container-name&gt;</code> deve ser o nome do contêiner que atende seu aplicativo e geralmente termina com <code>_laravel.test_1</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {{range.NetworkSettings.Networks}}{{.Gateway}}{{end}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Depois de obter o endereço IP do host correto, você deve definir a variável <code>SAIL_XDEBUG_CONFIG</code> dentro do arquivo <code>.env</code> do seu aplicativo:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SAIL_XDEBUG_CONFIG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;client_host=&lt;host-ip-address&gt;&quot;</span></span></code></pre></div><p><a name="xdebug-cli-usage"></a></p><h3 id="uso-do-xdebug-cli" tabindex="-1">Uso do Xdebug CLI <a class="header-anchor" href="#uso-do-xdebug-cli" aria-label="Permalink to &quot;Uso do Xdebug CLI&quot;">​</a></h3><p>Um comando <code>sail debug</code> pode ser usado para iniciar uma sessão de depuração ao executar um comando Artisan:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Execute um comando Artisan sem Xdebug...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> migrate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Execute um comando Artisan com Xdebug...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> migrate</span></span></code></pre></div><p><a name="xdebug-browser-usage"></a></p><h3 id="uso-do-navegador-xdebug" tabindex="-1">Uso do navegador Xdebug <a class="header-anchor" href="#uso-do-navegador-xdebug" aria-label="Permalink to &quot;Uso do navegador Xdebug&quot;">​</a></h3><p>Para depurar seu aplicativo enquanto interage com o aplicativo por meio de um navegador da web, siga o <a href="https://xdebug.org/docs/step_debug#web-application" target="_blank" rel="noreferrer">instruções fornecidas pelo Xdebug</a> para iniciar uma sessão Xdebug a partir do navegador da web.</p><p>Se você estiver usando o PhpStorm, revise a documentação do JetBrains sobre <a href="https://www.jetbrains.com/help/phpstorm/zero-configuration-debugging.html" target="_blank" rel="noreferrer">depuração de configuração zero</a>.</p><div class="warning custom-block"><p class="custom-block-title">AVISO</p><p>O Laravel Sail depende do <code>artisan serve</code> para servir sua aplicação. O comando <code>artisan serve</code> aceita apenas as variáveis ​​<code>XDEBUG_CONFIG</code> e <code>XDEBUG_MODE</code> a partir da versão 8.53.0 do Laravel. Versões mais antigas do Laravel (8.52.0 e abaixo) não suportam essas variáveis ​​e não aceitarão conexões de depuração.</p></div><p><a name="sail-customization"></a></p><h2 id="personalizacao" tabindex="-1">Personalização <a class="header-anchor" href="#personalizacao" aria-label="Permalink to &quot;Personalização&quot;">​</a></h2><p>Como o Sail é apenas Docker, você tem liberdade para personalizar quase tudo sobre ele. Para publicar os próprios Dockerfiles do Sail, você pode executar o comando <code>sail:publish</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sail:publish</span></span></code></pre></div><p>Após executar este comando, os Dockerfiles e outros arquivos de configuração usados ​​pelo Laravel Sail serão colocados em um diretório <code>docker</code> no diretório raiz do seu aplicativo. Após personalizar sua instalação do Sail, você pode desejar alterar o nome da imagem para o contêiner do aplicativo no arquivo <code>docker-compose.yml</code> do seu aplicativo. Depois de fazer isso, reconstrua os contêineres do seu aplicativo usando o comando <code>build</code>. Atribuir um nome exclusivo à imagem do aplicativo é particularmente importante se você estiver usando o Sail para desenvolver vários aplicativos Laravel em uma única máquina:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-cache</span></span></code></pre></div>`,187),t=[n];function l(d,p,r,c,h,k){return e(),s("div",null,t)}const g=a(o,[["render",l]]);export{m as __pageData,g as default};
